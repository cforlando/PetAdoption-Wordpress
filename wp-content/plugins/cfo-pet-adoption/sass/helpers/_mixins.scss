@import "variables";
@import "functions";


@mixin background-image-support($bg-image-prop){
  -webkit-background-image: $bg-image-prop;
  -moz-background-image: $bg-image-prop;
  -o-background-image: $bg-image-prop;
  background-image: $bg-image-prop;
}

@mixin pseudo-menu($width-pseudo-menu-em: 3em, $height-pseudo-menu-em: 1em, $color-menu-bar: #000) {
  position: relative;
  $adjusted-height: $height-pseudo-menu-em *0.8;

  &:before {
    content: "";
    position: absolute;
    cursor: pointer;
    @content;
    width: $width-pseudo-menu-em;
    height: ($adjusted-height *0.25);
    border-top: ($adjusted-height *0.75) double $color-menu-bar;
    border-bottom: ($adjusted-height *0.25) solid $color-menu-bar;
  }
}

@mixin darkened-overlay-before($bg-property: rgba(0,0,0,0.5)) {
  $bg-property-type: type_of($bg-property);
  position: relative;

  &:before {
    content: "";
    position: absolute;
    @if ($bg-property-type == 'color') {
      background-color: $bg-property;
    }
    @else if ($bg-property-type == 'compass::core::sassextensions::functions::gradientsupport::lineargradient') {
      @include background-image-support($bg-property);
    }
    @else if ($bg-property-type == 'list'){
      @include background($bg-property);
    }
    @else {
      @include background($bg-property);
    }
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: block;
    @content;
  }

  > * {
    position: relative;
  }
}

@mixin darkened-overlay-after($bg-property: rgba(0,0,0,0.5)) {
  $bg-property-type: type_of($bg-property);

  position: relative;
  &:after {
    content: "#{$bg-property-type}";
    position: absolute;
    @if ($bg-property-type == 'color') {
      background-color: $bg-property;
    } @else {
      @include background($bg-property);
      //TODO clean up fallback method for when background is not a gradient/image
      @include background-image-support($bg-property);
    }
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: block;
    @content;
  }

  > * {
    position: relative;
  }
}

@mixin centered-block($max-width: auto) {
  display: block;
  margin-left: auto;
  margin-right: auto;;
  @if ($max-width != auto) {
    max-width: $max-width;
    width: 100%;
  }
}

@mixin centered-spaced-block($margin-vertical: 0, $max-width: 960px) {
  display: block;
  margin: $margin-vertical auto;
  max-width: $max-width;
}

@mixin container-v-align-middle($selector: "v-align-content", $valign: middle) {
  display: table;
  width: 100%;

  #{$selector} {
    display: table-cell;
    vertical-align: $valign;
  }
}

@mixin image-placeholder($size: cover, $background-image: false) {
  background-position: center;
  background-repeat: no-repeat;
  background-size: $size;
  @if ($background-image) {
    background-image: $background-image;
    @include background-image-support($background-image);
  }
  @content
}

@mixin noflex($intermediate-selector: '') {
  @at-root html.no-flexbox #{$intermediate-selector} & {
    @content
  }
}

@mixin inline-block-img($height-percentage: 100%) {
  display: block;
  height: 0;
  margin: 0 auto;
  padding-bottom: $height-percentage;
  position: relative;
  width: 100%;
}


@mixin cut-outer-paragraph-margin {

  p {

    &:first-child {
      margin-top: 0;
    }

    &:last-child {
      margin-bottom: 0;
    }
  }
}


@mixin cut-outer-margin() {

  & {

    &:first-child {
      margin-top: 0;
    }

    &:last-child {
      margin-bottom: 0;
    }
  }
}

@mixin cut-outer-type-margin() {

  & {

    &:first-of-type {
      margin-top: 0;
    }

    &:last-of-type {
      margin-bottom: 0;
    }
  }
}

@mixin cut-outer-padding() {

  & {

    &:first-child {
      padding-top: 0;
    }

    &:last-child {
      padding-bottom: 0;
    }
  }
}

@mixin cut-outer-type-padding() {

  & {

    &:first-of-type {
      padding-top: 0;
    }

    &:last-of-type {
      padding-bottom: 0;
    }
  }
}

@mixin custom-heading-size($base-heading: h3, $adjusted-font-size: 40) {
  $headings: (h1: 2, h2: 1.5, h3: 1.17, h4: 1.12, h5: .83, h6: .75);
  $ratio: (em-sans($adjusted-font-size)/ map_get($headings, $base-heading));
  @each $heading-size, $font-size in $headings {
    #{$heading-size} {
      font-size: 1em *  $ratio * map_get($headings, $heading-size);
    }
  }
}

@mixin all-headings {

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @content
  }
}

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder { /* Firefox 18- */
    @content;
  }

  &::-moz-placeholder {  /* Firefox 19+ */
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

@mixin input-placeholder{
  @include placeholder{
    @content;
  }
}

@mixin insert-before($base, $insertion-point, $addition:  '.back > ') {
  $formatted-base: #{$base};
  @at-root #{str-insert($formatted-base, $addition, str-index($formatted-base, $insertion-point))}{
    @content;
  }
}

@mixin pet-photo {
  @include border-radius(50%);
  @include image-placeholder(cover, $url-960);
  @include inline-block-img(100%);
  overflow: hidden;
  width: 100%;
}